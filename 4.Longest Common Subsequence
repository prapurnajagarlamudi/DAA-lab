Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.
A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing 
the relative order of the remaining characters.For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

Example 1:
Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.

Example 2:
Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.

Example 3:
Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
 
Constraints:
1 <= text1.length, text2.length <= 1000
text1 and text2 consist of only lowercase English characters.

Source Code:

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>

int lcs(char *x,char *y,int m,int n)
{
    if(m==0||n==0)
    {
        return 0;
    }
    else if(x[m-1]==y[n-1])
    {
        return 1+lcs(x,y,m-1,n-1);
    }
    else
    {
        return fmax(lcs(x,y,m,n-1),lcs(x,y,m-1,n));
    }
}

void main()
{
    char X[10],Y[10];
    scanf("%s%s",X,Y);
    int m=strlen(X);
    int n=strlen(Y);
    printf("The longest common subsequence is %d",lcs(X,Y,m,n));
}


Output:

abcde
ace
The longest common subsequence is 3
