There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). 
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.
Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.
The test cases are generated so that the answer will be less than or equal to 2 * 109.

Example 1:
Input: m = 3, n = 7
Output: 28

Example 2:
Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down

Constraints:
1 <= m, n <= 100


Source Code:

#include<stdio.h>
int unique_paths(int m,int n)
{
    int grid[m][n];
    for(int i=0;i<m;i++)
    {
        grid[i][0]=1;
    }
    for(int i=0;i<n;i++)
    {
        grid[0][i]=1;
    }
    for(int i=1;i<m;i++)
    {
       for(int j=1;j<n;j++)
       {
           grid[i][j]=grid[i][j-1]+grid[i-1][j];
       }
    }
    return grid[m-1][n-1];
}
void main()
{
    int m,n;
    printf("Enter no of rows in grid:");
    scanf("%d",&m);
    printf("Enter no of columns in grid:");
    scanf("%d",&n);
    printf("The number of possible unique paths : %d",unique_paths(m,n));
}                                                                


output:
Enter no of rows in grid: 3
Enter no of columns in grid: 7
The number of possible unique paths : 28
